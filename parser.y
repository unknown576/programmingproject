%{
#include <stdio.h>
#include <stdbool.h> 
#include "lex.yy.h" // Include the header file generated by Flex

extern int yylex();       // Declaration of the lexing function
extern int yyparse();     // Declaration of the parsing function
extern FILE *yyin;        // Declaration of the input file for the lexer

void yyerror(const char *s); // Error handling function
%}

%union {
    int intValue;                   // For integer values
    int *intPtrValue;               // For pointers to integers
    float floatValue;               // For float values
    float *floatPtrValue;           // For pointers to floats
    char charValue;                 // For a single character
    char *charPtrValue;             // For pointers to char
    bool boolValue;                 // For boolean values
    struct MyStruct *myStructValue; // For a pointer to a custom data structure
}

%token <intValue> INTEGER MODULUS 
%token <floatValue> FLOAT DIVISION
%token <charValue> CHARACTER
%token <charPtrValue> STRING // if you have string literals
%token VOID PRINT IF IFELSE ELSE WHILE FOR BOOLEAN INPUT OUTPUT CLASS RETURN BREAK DEFAULT MAIN FILE INCLUDE NULL

%%
/* C-like Grammar Rules */

// The entry point of your language. It could be empty or consist of function definitions and declarations
program
    : /* empty */
    | program function_definition
    | program declaration
    ;

// Rule for function definitions
function_definition
    : type identifier '(' parameters ')' compound_statement
    ;

// Rule for declarations (like variable declarations)
declaration
    : type identifier ';'
    ;

// Rule for different types
type
    : INTEGER
    | FLOAT
    | BOOLEAN
    /* Add other types */
    ;

// Rule for a statement. This is a placeholder and should include all possible statements in your language
statement
    : expression_statement
    | compound_statement
    | if_statement
    | while_statement
    | for_statement
    | return_statement
    /* Add other statements */
    ;

// Define how an expression statement looks like
expression_statement
    : expression ';'
    ;

// Placeholder for expressions. This needs to be defined according to the expressions in your language
expression
    : /* Define expression rules */
    ;

// Rule for a compound statement (block of code enclosed in braces)
compound_statement
    : '{' statement_list '}'
    ;

// Rule for a list of statements
statement_list
    : /* empty */
    | statement_list statement
    ;

// Rule for if statements, including if-else
if_statement
    : IF '(' expression ')' statement
    | IF '(' expression ')' statement ELSE statement
    ;

// Rule for while loops
while_statement
    : WHILE '(' expression ')' statement
    ;

// Rule for for loops
for_statement
    : FOR '(' expression_statement expression_statement expression ')' statement
    ;

// Rule for return statements
return_statement
    : RETURN expression ';'
    ;

// Placeholder for identifiers (variable names, function names, etc.)
identifier
    : /* Token for identifiers */
    ;

// Placeholder for function parameters. Define this according to your language's syntax
parameters
    : /* Define parameter rules */
    ;
%%
